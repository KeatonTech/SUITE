
/*
  SUITE: Scriptable UI Templating Engine
  Keaton Brandt, 3am LLC
  -----------------------------------------
  A structured layout system for the modern
  web, providing a light-weight framework
  on which to build complex web app UIs.
  In many ways it is set up as a cross
  between FB React and Apple's UIKit.
  -----------------------------------------
 */

(function() {
  window.SUITE = {
    modules: {},
    config: {
      header: "This HTML was auto-generated by SUITE (suitejs.com). Do not edit directly.",
      id_prefix: "sc__",
      component_attribute: true
    }
  };

}).call(this);
(function() {
  window.wait = function(t, f) {
    return setTimeout(f, t);
  };

  window._sh = window.SUITE.Helpers = {
    camelToDash: function(str) {
      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    },
    dashToCamel: function(str) {
      return str.replace(/([A-Za-z])-([A-Za-z])/g, function(_, a, b) {
        return "" + (a.toLowerCase()) + (b.toUpperCase());
      });
    },
    time: function(label, func) {
      var diff, start_time;
      start_time = new Date().getTime();
      func();
      diff = (new Date().getTime()) - start_time;
      return console.log("" + label + " took " + diff + "ms");
    },
    generateID: function(len) {
      return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, len);
    }
  };

}).call(this);
(function() {
  window.SUITE.PrimitiveType = {
    'Boolean': 1,
    'String': 2,
    'Color': 3,
    'Function': 4,
    'Number': 8,
    'Component': 16,
    'Single': 0,
    'List': 32,
    'Object': 96
  };

  window.SUITE.Type = (function() {
    function Type(type, container, component_type) {
      var pt, typenum;
      if (container == null) {
        container = window.SUITE.PrimitiveType.Single;
      }
      pt = window.SUITE.PrimitiveType;
      typenum = type & container;
      if (type === pt.Component && (component_type != null)) {
        this.component = component_type;
        this.num = typenum;
      } else {
        return typenum;
      }
    }

    return Type;

  })();

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SUITE.Property = (function() {
    function Property(type, default_val, setter) {
      if (typeof this.type === 'array') {
        this.type = window.SUITE.Type.apply(this.type);
      }
      if (type instanceof window.SUITE.Type && (type.component != null)) {
        return window.SUITE.ComponentProperty(type, setter);
      }
      this.type = type;
      this["default"] = default_val;
      if (setter != null) {
        this.setter = setter;
      }
    }

    Property.prototype.copy = function() {
      return new window.SUITE.Property(this.type, this["default"], this.setter);
    };

    return Property;

  })();

  window.SUITE.EventListenerProperty = (function(_super) {
    __extends(EventListenerProperty, _super);

    function EventListenerProperty(listener, element_name, setter, default_val) {
      EventListenerProperty.__super__.constructor.call(this, SUITE.PrimitiveType.Function, default_val, setter);
      this.listener = listener;
      this.element = element_name;
    }

    EventListenerProperty.prototype.copy = function() {
      var copy;
      copy = EventListenerProperty.__super__.copy.call(this);
      copy.listener = this.listener;
      copy.element = this.element;
      return copy;
    };

    return EventListenerProperty;

  })(window.SUITE.Property);

  window.SUITE.ComponentProperty = (function() {
    function ComponentProperty(type, handlers) {
      if (handlers == null) {
        handlers = {};
      }
      this.type = type;
      this.handlers = handlers;
    }

    ComponentProperty.prototype.addHandler = function(event, func) {
      if (this.handlers[event] == null) {
        this.handlers[event] = [];
      }
      return this.handlers[event].push(func);
    };

    ComponentProperty.prototype.copy = function() {
      var e, h, handlers_copy, _ref;
      handlers_copy = {};
      _ref = this.handlers;
      for (e in _ref) {
        h = _ref[e];
        handlers_copy[e] = h;
      }
      return new SUITE.ComponentProperty(this.type, handlers_copy);
    };

    return ComponentProperty;

  })();

  window.SUITE.Slot = (function(_super) {
    __extends(Slot, _super);

    function Slot(isRepeated, component_type, handlers) {
      var primative, type;
      this.isRepeated = isRepeated;
      this.componentType = component_type;
      primative = SUITE.PrimitiveType;
      if (this.isRepeated) {
        type = new SUITE.Type(primative.Component, primative.List, component_type);
      } else {
        type = new SUITE.Type(primative.Component, primative.Single, component_type);
      }
      Slot.__super__.constructor.call(this, type, handlers);
    }

    Slot.prototype.allowComponent = function(component) {
      return true;
    };

    Slot.prototype.copy = function() {
      var e, h, handlers_copy, _ref;
      handlers_copy = {};
      _ref = this.handlers;
      for (e in _ref) {
        h = _ref[e];
        handlers_copy[e] = h;
      }
      return new SUITE.Slot(this.isRepeated, this.componentType, handlers_copy);
    };

    return Slot;

  })(window.SUITE.ComponentProperty);

}).call(this);
(function() {
  window.SUITE.EventTypes = ["onMove", "onShift", "onResize", "onChange", "onRender", "onHide", "onShow", "onAdd", "onRemove"];

}).call(this);
(function() {
  window.SUITE.Module = (function() {
    function Module(name, extend_name, properties, slots) {
      if (properties == null) {
        properties = {};
      }
      if (slots == null) {
        slots = {};
      }
      this.name = name.toLowerCase();
      this.properties = properties;
      this.slots = slots;
      this.handlers = {};
      this.methods = {};
      this.styles = {};
      if (extend_name != null) {
        this.extend(extend_name);
      }
    }

    Module.prototype.addProperty = function(name, type_or_property, default_val, setter) {
      if (type_or_property instanceof window.SUITE.Property) {
        return this.properties[name] = type_or_property;
      }
      return this.properties[name] = new window.SUITE.Property(type_or_property, default_val, setter);
    };

    Module.prototype.addSlot = function(name, slot) {
      if (slot == null) {
        slot = new window.SUITE.Slot(false);
      }
      return this.slots[name] = slot;
    };

    Module.prototype.addHandler = function(event, func) {
      if (this.handlers[event] == null) {
        this.handlers[event] = [];
      }
      return this.handlers[event].push(func);
    };

    Module.prototype.addMethod = function(name, func) {
      if (window.SUITE.Component.prototype.hasOwnProperty(name)) {
        console.log("Method name '" + name + "' is already taken by an internal component function");
        return;
      }
      return this.methods[name] = func;
    };

    Module.prototype.addStyle = function(name, style) {
      this.styles[name] = style;
      return this.styles["" + this.name + "." + name] = style;
    };

    Module.prototype.extend = function(existingModuleName) {
      var e, existingModule, m, name, p, s, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this["super"] = existingModule = SUITE.modules[existingModuleName];
      _ref = existingModule.properties;
      for (name in _ref) {
        p = _ref[name];
        this.properties[name] = p.copy();
      }
      _ref1 = existingModule.slots;
      for (name in _ref1) {
        s = _ref1[name];
        this.slots[name] = s.copy();
      }
      _ref2 = existingModule.events;
      for (name in _ref2) {
        e = _ref2[name];
        this.events[name] = e;
      }
      _ref3 = existingModule.handlers;
      for (name in _ref3) {
        m = _ref3[name];
        this.handlers[name] = m;
      }
      _ref4 = existingModule.styles;
      for (name in _ref4) {
        s = _ref4[name];
        this.styles[name] = s;
      }
      _ref5 = existingModule.methods;
      for (name in _ref5) {
        m = _ref5[name];
        this.methods[name] = m;
      }
      if (this.render == null) {
        this.render = existingModule.render;
      }
      if (this.onResize == null) {
        this.onResize = existingModule.onResize;
      }
      if (this.getWidth == null) {
        this.getWidth = existingModule.getWidth;
      }
      if (this.getHeight == null) {
        return this.getHeight = existingModule.getHeight;
      }
    };

    Module.prototype.initialize = function() {
      return this["super"]();
    };

    Module.prototype.render = function() {
      return this["super"]();
    };

    Module.prototype.onResize = function(size) {
      return this["super"](size);
    };

    return Module;

  })();

  window.SUITE.newModule = function(name) {
    name = name.toLowerCase();
    return window.SUITE.modules[name] = new window.SUITE.Module(name);
  };

  window.SUITE.registerModule = function(module) {
    return window.SUITE.modules[module.name] = module;
  };

}).call(this);
(function() {
  window.SUITE.Transition = (function() {
    function Transition(duration, easing) {
      if (duration == null) {
        duration = 300;
      }
      if (easing == null) {
        easing = "ease-out";
      }
      this.duration = duration;
      this.easing = easing;
      this.elements = [];
      this.attributes = [];
    }

    Transition.prototype.addAttribute = function(element, attr, value) {
      var index;
      index = this.elements.indexOf(element);
      if (index === -1) {
        index = this.elements.length;
        this.elements.push(element);
        this.attributes.push({});
      }
      return this.attributes[index][attr] = value;
    };

    Transition.prototype.addAttrs = function(element, attrs) {
      return new SUITE.AttrFunctionFactory(element, this)(attrs);
    };

    Transition.prototype.run = function() {
      var attrs, element, i, _ref, _results;
      _ref = this.attributes;
      _results = [];
      for (i in _ref) {
        attrs = _ref[i];
        element = this.elements[i];
        _results.push(this._animateAttrs(element, attrs));
      }
      return _results;
    };

    Transition.prototype._animateAttrs = function(element, attrs) {
      var full_style, name, p, prefixes, transition_strings, transition_style, value;
      transition_strings = (function() {
        var _results;
        _results = [];
        for (name in attrs) {
          value = attrs[name];
          _results.push("" + (_sh.camelToDash(name)) + " " + this.duration + "ms " + this.easing);
        }
        return _results;
      }).call(this);
      transition_style = transition_strings.join(",");
      prefixes = ["", "-webkit-", "-moz-", "-ms-"];
      full_style = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = prefixes.length; _i < _len; _i++) {
          p = prefixes[_i];
          _results.push("" + p + "transition:" + transition_style);
        }
        return _results;
      })()).join(";");
      element.setAttribute("style", element.getAttribute("style") + full_style);
      return wait(5, function() {
        for (name in attrs) {
          value = attrs[name];
          element.style[name] = value;
        }
        return wait(5, function() {
          return element.setAttribute("style", element.getAttribute("style").replace(full_style, ""));
        });
      });
    };

    return Transition;

  })();

  window.SUITE.Animation = (function() {
    function Animation() {
      this.times = [];
      this.transitions = [];
    }

    Animation.prototype.addTransition = function(time, transition) {
      var existing_time, _i, _len, _ref;
      _ref = this.times;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        existing_time = _ref[_i];
        if (Math.abs(existing_time - time) <= 10) {
          console.log("Transitions must be at least 11ms apart to prevent CSS conflicts");
          return false;
        }
      }
      this.times.push(time);
      this.transitions.push(transition);
      return this.transitions.length - 1;
    };

    Animation.prototype.run = function() {
      var i, time, _ref, _results;
      _ref = this.times;
      _results = [];
      for (i in _ref) {
        time = _ref[i];
        _results.push(wait(time, (function(transition) {
          return transition.run();
        })(this.transitions[i])));
      }
      return _results;
    };

    return Animation;

  })();

  window.SUITE._currentTransition = void 0;

  window.SUITE.AnimateChanges = function(transition, func) {
    window.SUITE._currentTransition = transition;
    func();
    window.SUITE._currentTransition.run();
    return window.SUITE._currentTransition = void 0;
  };

}).call(this);
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.SUITE.UnitlessAttributes = ["opacity", "zIndex", "fontWeight", "lineHeight", "counterIncrement", "counterReset", "flexGrow", "flexShrink", "volume", "stress", "pitchRange", "richness"];

  window.SUITE.StyleManager = (function() {
    function StyleManager() {
      if (window.SUITE.styleManager != null) {
        return window.SUITE.styleManager;
      }
      window.SUITE.styleManager = this;
      this.element = document.createElement("style");
      this.element.setAttribute("type", "text/css");
      document.head.appendChild(this.element);
      this.styles = {};
    }

    StyleManager.prototype.addStyle = function(style_instance) {
      if (this.styles[style_instance.id] != null) {
        return;
      }
      this.styles[style_instance.id] = true;
      return this.element.innerHTML += style_instance.generateCSS();
    };

    return StyleManager;

  })();

  window.SUITE.Style = (function() {
    function Style(name, attributes) {
      var attr, needs_unit, val;
      this.id = SUITE.config.id_prefix + name;
      this["static"] = {};
      this.dynamic = {};
      this.has_static = false;
      this.has_dynamic = false;
      for (attr in attributes) {
        val = attributes[attr];
        needs_unit = !(__indexOf.call(SUITE.UnitlessAttributes, attr) >= 0);
        if (typeof val === 'function') {
          attr = _sh.dashToCamel(attr);
          this.has_dynamic = true;
          this.dynamic[attr] = new SUITE.DynamicStyleAttribute(val, needs_unit);
        } else {
          attr = _sh.camelToDash(attr);
          if (typeof val === 'number' && needs_unit) {
            val = val + "px";
          }
          this.has_static = true;
          this["static"][attr] = val;
        }
      }
    }

    Style.prototype.generateCSS = function() {
      var attr, body, val;
      body = ((function() {
        var _ref, _results;
        _ref = this["static"];
        _results = [];
        for (attr in _ref) {
          val = _ref[attr];
          _results.push("" + attr + ": " + val + ";");
        }
        return _results;
      }).call(this)).join("");
      return "." + this.id + "{" + body + "}\n";
    };

    Style.prototype.applyToElement = function(component, element) {
      var attr, computed, dsa, property, _, _ref, _ref1;
      if (this.has_static) {
        window.SUITE.styleManager.addStyle(this);
        element.className += " " + this.id;
      }
      _ref = this.dynamic;
      for (attr in _ref) {
        dsa = _ref[attr];
        computed = dsa["eval"](component._api);
        if (computed != null) {
          element.style[attr] = computed;
        }
        _ref1 = dsa.dependencies;
        for (property in _ref1) {
          _ = _ref1[property];
          component.addPropertyChangeListener(property, (function(attr, dsa, element) {
            return function() {
              var change;
              change = {};
              change[attr] = dsa["eval"](this);
              if (change[attr] == null) {
                return;
              }
              return this.setAttrs(element, change);
            };
          })(attr, dsa, element));
        }
      }
      return true;
    };

    return Style;

  })();

  window.SUITE.DynamicStyleAttribute = (function() {
    function DynamicStyleAttribute(func, needs_unit) {
      var extract_properties, func_body, match;
      this.needs_unit = needs_unit;
      this._eval = func;
      this.dependencies = {};
      func_body = func.toString();
      extract_properties = /\$([A-Za-z0-9\-\_]+)/g;
      while (match = extract_properties.exec(func_body)) {
        this.dependencies[match[1]] = true;
      }
    }

    DynamicStyleAttribute.prototype["eval"] = function(moduleAPI) {
      var result;
      if (!this.needs_unit) {
        return this._eval.call(moduleAPI);
      } else {
        result = this._eval.call(moduleAPI);
        if (result == null) {
          return void 0;
        }
        if (typeof result === "number") {
          result = result + "px";
        }
        return result;
      }
    };

    return DynamicStyleAttribute;

  })();

}).call(this);
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.SUITE.AttrFunctionFactory = function(default_element, transition) {
    return function(attributes_or_element, or_attributes) {
      var attr_name, attributes, classname, element, name, value;
      if (attributes_or_element instanceof HTMLElement) {
        element = attributes_or_element;
        attributes = or_attributes;
      } else {
        element = default_element;
        attributes = attributes_or_element;
      }
      for (name in attributes) {
        value = attributes[name];
        switch (name.split(".")[0].toLowerCase()) {
          case "id" || "src" || "href" || "rel" || "target" || "alt" || "title":
            if (element == null) {
              return;
            }
            element.setAttribute(name, value);
            break;
          case "attr":
            if (element == null) {
              return;
            }
            attr_name = name.split(".")[1];
            element.setAttribute(attr_name, value);
            break;
          case "class":
            if (element == null) {
              return;
            }
            if (value[0] === "+") {
              classname = element.getAttribute("class");
              element.setAttribute("class", classname + " " + value.substr(1));
            } else if (value[0] === "-") {
              classname = element.getAttribute("class");
              element.setAttribute("class", classname.replace(value.substr(1), ""));
            } else {
              element.setAttribute("class", value);
            }
            break;
          default:
            if (typeof value === "number" && !(__indexOf.call(SUITE.UnitlessAttributes, name) >= 0)) {
              value = "" + value + "px";
            }
            if (transition == null) {
              element.style[name] = value;
            } else {
              transition.addAttribute(element, name, value);
            }
        }
      }
    };
  };

}).call(this);
(function() {
  window.SUITE.TextMetrics = (function() {
    function TextMetrics(cfg) {
      if (SUITE._hiddenCanvas == null) {
        SUITE._hiddenCanvas = this.createCanvas();
      }
      this.ctx = SUITE._hiddenCanvas.getContext("2d");
      if (cfg instanceof SUITE.Component || cfg instanceof SUITE.ModuleAPI) {
        this.font = cfg.$fontFamily instanceof Array ? "'" + cfg.$fontFamily.join("', '") + "'" : "'" + cfg.$fontFamily + "'";
        this.fontSize = cfg.$fontSize;
        this.letterSpacing = cfg.$letterSpacing;
      } else {
        this.font = "sans-serif";
        this.fontSize = 18;
        this.letterSpacing = 0;
      }
    }

    TextMetrics.prototype.createCanvas = function() {
      var c;
      c = document.createElement("canvas");
      c.style.display = "none";
      document.body.appendChild(c);
      return c;
    };

    TextMetrics.prototype.measure = function(string) {
      var width;
      this.ctx.font = this.fontSize + "px " + this.font;
      width = this.ctx.measureText(string).width;
      width += (string.length - 1) * this.letterSpacing;
      return {
        width: width,
        height: this.fontSize
      };
    };

    return TextMetrics;

  })();

}).call(this);
(function() {
  window.SUITE.ModuleAPI = (function() {
    function ModuleAPI(component) {
      var func, name, prefixed, property, s, slot, _ref, _ref1, _ref2;
      this._ = component;
      this.slots = {};
      _ref = this._.slots;
      for (name in _ref) {
        slot = _ref[name];
        if (slot instanceof Array) {
          this.slots[name] = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = slot.length; _i < _len; _i++) {
              s = slot[_i];
              _results.push(s._api);
            }
            return _results;
          })();
        } else {
          this.slots[name] = slot._api;
        }
      }
      _ref1 = this._._module.properties;
      for (name in _ref1) {
        property = _ref1[name];
        prefixed = "$" + name;
        Object.defineProperty(this, prefixed, Object.getOwnPropertyDescriptor(this._, prefixed));
      }
      _ref2 = this._._module.methods;
      for (name in _ref2) {
        func = _ref2[name];
        this[name] = this._[name];
      }
      Object.defineProperty(this, "size", {
        get: function() {
          return {
            width: this.$width,
            height: this.$height
          };
        }
      });
      Object.defineProperty(this, "rootElement", {
        get: function() {
          return this._._rootElement;
        }
      });
      this.resize = this._.resize.bind(this._);
      this.render = this._.render.bind(this._);
      this.dispatchEvent = this._._dispatchEvent.bind(this._);
      this.hasPropertyValue = this._.hasPropertyValue.bind(this._);
      this.fillSlot = this._.fillSlot.bind(this._);
      this.removeSlotComponent = this._.removeSlotComponent.bind(this._);
      this.emptySlot = this._.emptySlot.bind(this._);
      this.allSlotComponents = this._.allSlotComponents.bind(this._);
      this.allSubComponents = this._.allSubComponents.bind(this._);
    }

    ModuleAPI.prototype._prepare = function(super_module, super_function_name) {
      this._prepareAttrSetter();
      this._setSuper(super_module, super_function_name);
      return this._clearSuper;
    };

    ModuleAPI.prototype._prepareAttrSetter = function() {
      this.setAttrs = SUITE.AttrFunctionFactory(this._._rootElement, SUITE._currentTransition);
      return this.forceAttrs = SUITE.AttrFunctionFactory(this._._rootElement);
    };

    ModuleAPI.prototype._setSuper = function(super_module, function_name) {
      if (super_module == null) {
        this["super"] = function() {};
      }
      this._super_module = super_module;
      this._super_func = this._super_module[function_name];
      return this["super"] = function() {
        var oldmod, result, run, _ref, _ref1;
        run = this._super_func;
        oldmod = this._super_module;
        this._super_module = (_ref = this._super_module) != null ? _ref["super"] : void 0;
        this._super_func = (_ref1 = this._super_module) != null ? _ref1[function_name] : void 0;
        if (run != null) {
          result = run.apply(this, arguments);
        }
        this._super_module = oldmod;
        this._super_func = run;
        return result;
      };
    };

    ModuleAPI.prototype._clearSuper = function() {
      return this["super"] = void 0;
    };

    ModuleAPI.prototype.setPropertyWithoutSetter = function(name, val) {
      return this._._values[name] = val;
    };

    ModuleAPI.prototype.appendElement = function(root_or_element, element) {
      if (element != null) {
        if (typeof element === "string") {
          element = this.getElement(element);
        }
        return root_or_element.appendChild(element);
      } else {
        if (typeof root_or_element === "string") {
          root_or_element = this.getElement(root_or_element);
        }
        return this._._rootElement.appendChild(root_or_element);
      }
    };

    ModuleAPI.prototype.removeElement = function(name_or_element) {
      if (typeof name_or_element === "string") {
        name_or_element = this.getElement(name_or_element);
      }
      if (name_or_element == null) {
        return;
      }
      return name_or_element.parentNode.removeChild(name_or_element);
    };

    ModuleAPI.prototype.createElement = function(elementName_or_tagName, tagName) {
      if (tagName == null) {
        return document.createElement(elementName_or_tagName);
      }
      return this._._elements[elementName_or_tagName] = document.createElement(tagName);
    };

    ModuleAPI.prototype.setElement = function(name, element) {
      return this._._elements[name] = element;
    };

    ModuleAPI.prototype.getElement = function(name) {
      return this._._elements[name];
    };

    ModuleAPI.prototype.applyStyle = function(element, style_name) {
      var style;
      style = this._._module.styles[style_name];
      if (style == null) {
        return false;
      }
      style.applyToElement(this._, element);
      return true;
    };

    ModuleAPI.prototype.renderSlot = function(slot_or_name, slot) {
      if (slot != null) {
        return this._._elements[slot_or_name] = slot.render();
      } else {
        return slot_or_name.render();
      }
    };

    ModuleAPI.prototype.createComponent = function(type_name) {
      return new SUITE.Component(type_name);
    };

    return ModuleAPI;

  })();

}).call(this);
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.SUITE.Component = (function() {
    function Component(module_or_name) {
      var event, func, name, slot, _ref, _ref1, _ref2;
      this.parent = void 0;
      this._rootElement = void 0;
      this._elements = {};
      this._varname = void 0;
      if (module_or_name instanceof window.SUITE.Module) {
        this._module = module_or_name;
        this.type = module_or_name.name;
      } else {
        name = module_or_name.toLowerCase();
        this._module = window.SUITE.modules[name];
        this.type = name;
      }
      this._setupPropertyBindings();
      this.slots = {};
      _ref = this._module.slots;
      for (name in _ref) {
        slot = _ref[name];
        if (slot.isRepeated) {
          this.slots[name] = [];
        }
      }
      _ref1 = this._module.methods;
      for (name in _ref1) {
        func = _ref1[name];
        this[name] = ((function(_this) {
          return function(func) {
            return function() {
              _this._api._prepareAttrSetter();
              return func.apply(_this._api, arguments);
            };
          };
        })(this))(func);
      }
      this._handlers = {};
      _ref2 = this._module.handlers;
      for (event in _ref2) {
        func = _ref2[event];
        this.addHandler(event, func);
      }
      this._changeListeners = {};
      this._api = new SUITE.ModuleAPI(this);
    }

    Component.prototype.copy = function() {
      var copy, k, s, slot_contents, v, _ref, _ref1;
      copy = new SUITE.Component(this.type);
      copy.parent = this.parent;
      copy._module = this._module;
      copy._varname = this._varname;
      _ref = this._values;
      for (k in _ref) {
        v = _ref[k];
        copy._values[k] = v;
      }
      _ref1 = this.slots;
      for (k in _ref1) {
        slot_contents = _ref1[k];
        if (slot_contents instanceof Array) {
          copy.slots[k] = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = slot_contents.length; _i < _len; _i++) {
              s = slot_contents[_i];
              _results.push(s.copy());
            }
            return _results;
          })();
        } else {
          copy.slots[k] = slot_contents.copy();
        }
      }
      return copy;
    };

    Component.prototype._setupPropertyBindings = function() {
      var name, p, _ref, _results;
      this._values = {};
      _ref = this._module.properties;
      _results = [];
      for (name in _ref) {
        p = _ref[name];
        if (name == null) {
          continue;
        }
        this._values[name] = p["default"];
        _results.push(Object.defineProperty(this, "$" + name, {
          get: (function(_this, name) {
            return function() {
              return _this._values[name];
            };
          })(this, name),
          set: ((function(_this) {
            return function(name, p) {
              if (p.setter != null) {
                return function(val) {
                  var oldval;
                  oldval = _this._values[name];
                  _this._values[name] = val;
                  _this._api._prepareAttrSetter();
                  p.setter.call(_this._api, val, oldval);
                  return _this._runPropertyChangeListeners(name, val, oldval);
                };
              } else {
                return function(val) {
                  var oldval;
                  oldval = _this._values[name];
                  _this._values[name] = val;
                  _this._api._prepareAttrSetter();
                  return _this._runPropertyChangeListeners(name, val, oldval);
                };
              }
            };
          })(this))(name, p)
        }));
      }
      return _results;
    };

    Component.prototype._runPropertyChangeListeners = function(property_name, val, oldval) {
      var listener, _i, _len, _ref;
      if (this._changeListeners[property_name] != null) {
        _ref = this._changeListeners[property_name];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener.call(this._api, val, oldval);
        }
        return true;
      }
      return false;
    };

    Component.prototype.addPropertyChangeListener = function(property_name, func) {
      if (this._changeListeners[property_name] == null) {
        this._changeListeners[property_name] = [];
      }
      return this._changeListeners[property_name].push(func);
    };

    Component.prototype.hasPropertyValue = function(name) {
      return this._module.properties[name] != null;
    };

    Component.prototype.fillSlot = function(slotName, component) {
      var index, slot_class;
      if ((slot_class = this._module.slots[slotName]) == null) {
        return -1;
      }
      if (component instanceof SUITE.Template) {
        component = component._component;
      }
      if (component instanceof SUITE.ModuleAPI) {
        component = component._;
      }
      if (!slot_class.allowComponent(component)) {
        return -1;
      }
      component.parent = this;
      component.bindToComponentProperty(this, slot_class);
      index = 0;
      if (slot_class.isRepeated) {
        if (!(__indexOf.call(this.slots, slotName) >= 0)) {
          this.slots[slotName] = [];
        }
        index = this.slots.length;
        this.slots[slotName].push(component);
        this._api.slots[slotName].push(component._api);
      } else {
        if (this.slots[slotName] != null) {
          this.slots[slotName].unbindFromComponentProperty(slot_class);
        }
        this.slots[slotName] = component;
        this._api.slots[slotName] = component._api;
      }
      this.rerender();
      return index;
    };

    Component.prototype.removeSlotComponent = function(slotName, index) {
      var slot_class;
      if ((slot_class = this._module.slots[slotName]) == null) {
        return -1;
      }
      if (!(this.slots[slotName] instanceof Array)) {
        return false;
      }
      this.slots[slotName][index].parent = void 0;
      this.slots[slotName][index].unbindFromComponentProperty(slot_class);
      this.slots[slotName].splice(index, 1);
      this._api.slots[slotName].splice(index, 1);
      return true;
    };

    Component.prototype.emptySlot = function(slotName) {
      var slot, slot_class, _i, _len, _ref;
      if ((slot_class = this._module.slots[slotName]) == null) {
        return -1;
      }
      if (this.slots[slotName] instanceof Array) {
        _ref = this.slots[slotName];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slot = _ref[_i];
          slot.parent = void 0;
          slot.unbindFromComponentProperty(slot_class);
        }
      } else {
        this.slots[slotName].parent = void 0;
        this.slots[slotName].unbindFromComponentProperty(slot_class);
      }
      delete this.slots[slotName];
      delete this._api.slots[slotName];
      return this.rerender();
    };

    Component.prototype.allSlotComponents = function() {
      var all, k, slot_contents, _ref;
      all = [];
      _ref = this.slots;
      for (k in _ref) {
        slot_contents = _ref[k];
        if (slot_contents instanceof Array) {
          if (slot_contents.length === 0) {
            continue;
          }
          Array.prototype.push.apply(all, slot_contents);
        } else {
          all.push(slot_contents);
        }
      }
      return all;
    };

    Component.prototype.allSubComponents = function() {
      var all, c, _i, _len, _ref;
      all = [];
      _ref = this.allSlotComponents();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        all.push(c);
        Array.prototype.push.apply(all, c.allSubComponents());
      }
      return all;
    };

    Component.prototype.addHandler = function(event, func) {
      var f, _i, _len, _results;
      if (this._handlers[event] == null) {
        this._handlers[event] = [];
      }
      if (func instanceof Array) {
        _results = [];
        for (_i = 0, _len = func.length; _i < _len; _i++) {
          f = func[_i];
          _results.push(this._handlers[event].push(f));
        }
        return _results;
      } else {
        return this._handlers[event].push(func);
      }
    };

    Component.prototype.removeHandler = function(event, func) {
      if (this._handlers[event] == null) {
        this._handlers[event] = [];
      }
      return this._handlers[event].filter(function(h) {
        return h !== func;
      });
    };

    Component.prototype.bindToComponentProperty = function(component, property) {
      var boundHandler, handler_s, s, type, _ref, _results;
      boundHandler = function(func) {
        return function() {
          var a, args;
          component._api._prepareAttrSetter();
          args = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = arguments.length; _i < _len; _i++) {
              a = arguments[_i];
              _results.push(a);
            }
            return _results;
          }).apply(this, arguments);
          if (args != null) {
            args.unshift(this);
          } else {
            args = [this];
          }
          return func.apply(component._api, args);
        };
      };
      _ref = property.handlers;
      _results = [];
      for (type in _ref) {
        handler_s = _ref[type];
        if (handler_s instanceof Array) {
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = handler_s.length; _i < _len; _i++) {
              s = handler_s[_i];
              _results1.push(this.addHandler(type, boundHandler(s)));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(this.addHandler(type, boundHandler(handler_s)));
        }
      }
      return _results;
    };

    Component.prototype.unbindFromComponentProperty = function(property) {
      var handler_s, s, type, _ref, _results;
      _ref = property.handlers;
      _results = [];
      for (type in _ref) {
        handler_s = _ref[type];
        if (handler_s instanceof Array) {
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = handler_s.length; _i < _len; _i++) {
              s = handler_s[_i];
              _results1.push(this.removeHandler(type, s));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(this.removeHandler(type, handler_s));
        }
      }
      return _results;
    };

    Component.prototype._dispatchEvent = function(event, args) {
      var handler, _i, _len, _ref, _results;
      if (this._handlers[event] == null) {
        return;
      }
      if (!(args instanceof Array)) {
        args = [args];
      }
      _ref = this._handlers[event];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler.apply(this._api, args));
      }
      return _results;
    };

    Component.prototype.render = function(first_render) {
      var cleanup;
      if (first_render == null) {
        first_render = true;
      }
      if (this._module.render == null) {
        return;
      }
      if (first_render) {
        cleanup = this._api._prepare(this._module["super"], "initialize");
        this._module.initialize.call(this._api);
        cleanup();
      }
      cleanup = this._api._prepare(this._module["super"], "render");
      this._rootElement = this._module.render.call(this._api, this.slots);
      cleanup();
      return this._rootElement;
    };

    Component.prototype.rerender = function() {
      var olddom;
      if (this._rootElement == null) {
        return;
      }
      olddom = this._rootElement;
      this.render(false);
      olddom.parentNode.insertBefore(this._rootElement, olddom);
      olddom.parentNode.removeChild(olddom);
      return this._rootElement;
    };

    Component.prototype.resize = function(size) {
      var cleanup;
      if (this._module.onResize == null) {
        return;
      }
      cleanup = this._api._prepare(this._module["super"], "onResize");
      this._module.onResize.call(this._api, size);
      return cleanup();
    };

    return Component;

  })();

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SUITE.Stage = (function(_super) {
    __extends(Stage, _super);

    function Stage(elementSelector) {
      if (document.querySelectorAll(elementSelector).length > 1) {
        throw new Error("Please choose a unique selector (only applies to 1 element)");
      }
      this.html_container = document.querySelector(elementSelector);
      Stage.__super__.constructor.call(this, "container");
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.resize({
            width: _this.html_container.offsetWidth,
            height: _this.html_container.offsetHeight
          });
        };
      })(this));
    }

    Stage.prototype.render = function() {
      return _sh.time("Full stage render", (function(_this) {
        return function() {
          var container, header_comment;
          new window.SUITE.StyleManager();
          _this.resize({
            width: _this.html_container.offsetWidth,
            height: _this.html_container.offsetHeight
          });
          container = Stage.__super__.render.call(_this);
          header_comment = document.createComment(SUITE.config.header);
          container.insertBefore(header_comment, container.firstChild);
          return _this.html_container.appendChild(container);
        };
      })(this));
    };

    return Stage;

  })(window.SUITE.Component);

}).call(this);
(function() {
  window.SUITE.Template = (function() {
    function Template(topLevelComponent) {
      this._component = topLevelComponent;
      this._namedComponents = [];
    }

    Template.prototype.addComponentVariable = function(name, component) {
      component._varname = name;
      this._namedComponents.push(name);
      return this[name] = component;
    };

    Template.prototype.copy = function() {
      var component, copy, _i, _len, _ref;
      copy = new SUITE.Template(this._component.copy());
      if (this._component._varname) {
        copy[this._component._varname] = this._component;
      }
      _ref = copy._component.allSubComponents();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        component = _ref[_i];
        if (component._varname != null) {
          copy[component._varname] = component;
        }
      }
      return copy;
    };

    Template.prototype.extend = function(template) {
      var nc, _i, _len, _ref, _results;
      _ref = template._namedComponents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nc = _ref[_i];
        _results.push(this[nc] = template[nc]);
      }
      return _results;
    };

    return Template;

  })();

}).call(this);
(function() {
  window.SUITE.ModuleBuilder = (function() {
    function ModuleBuilder(name) {
      this.module = new window.SUITE.Module(name);
    }

    ModuleBuilder.prototype.build = function() {
      return this.module;
    };

    ModuleBuilder.prototype.register = function() {
      return window.SUITE.registerModule(this.module);
    };

    ModuleBuilder.prototype.addProperty = function(name_or_property, type, default_val, setter) {
      this.module.addProperty(name_or_property, type, default_val, setter);
      return this;
    };

    ModuleBuilder.prototype.removeProperty = function(name) {
      if (this.module.properties[name]) {
        delete this.module.properties[name];
      }
      return this;
    };

    ModuleBuilder.prototype.setPropertySetter = function(name, setter) {
      this.module.properties[name].setter = setter;
      return this;
    };

    ModuleBuilder.prototype.addEventHandler = function(event, func) {
      this.module.addHandler(event, func);
      return this;
    };

    ModuleBuilder.prototype.addSlot = function(name, isRepeated, allowType) {
      if (isRepeated == null) {
        isRepeated = false;
      }
      this.module.addSlot(name, new window.SUITE.Slot(isRepeated));
      if (allowType != null) {
        this.module.slots[name].allowType = allowType;
      }
      return this;
    };

    ModuleBuilder.prototype.addSlotEventHandler = function(name, event, func) {
      if (this.module.slots[name] == null) {
        return;
      }
      this.module.slots[name].addHandler(event, func);
      return this;
    };

    ModuleBuilder.prototype.addSlotFromClass = function(name, slot) {
      this.module.addSlot(name, slot);
      return this;
    };

    ModuleBuilder.prototype.addEventListener = function(event, func) {
      this.module.addEventListener(event, func);
      return this;
    };

    ModuleBuilder.prototype.addMethod = function(name, func) {
      this.module.addMethod(name, func);
      return this;
    };

    ModuleBuilder.prototype.addStyle = function(name, attributes) {
      var style;
      style = new SUITE.Style(name, attributes);
      this.module.addStyle(name, style);
      return this;
    };

    ModuleBuilder.prototype.removeStyle = function(name) {
      if (this.module.styles[name]) {
        delete this.module.styles[name];
      }
      return this;
    };

    ModuleBuilder.prototype.setRenderer = function(renderFunction) {
      this.module.render = renderFunction;
      return this;
    };

    ModuleBuilder.prototype.setInitializer = function(initializeFunction) {
      this.module.initialize = initializeFunction;
      return this;
    };

    ModuleBuilder.prototype.setOnResize = function(resizedFunction) {
      this.module.onResize = resizedFunction;
      return this;
    };

    ModuleBuilder.prototype.extend = function(module_name) {
      this.module.extend(module_name);
      return this;
    };

    return ModuleBuilder;

  })();

}).call(this);
(function() {
  window.SUITE.ParseTemplate = function(json) {
    var build_recursive, container, new_template, parse_selector, properties, selector, selector_regex, single_key, single_template, template;
    if (Object.keys(json).length === 0) {
      return;
    }
    if (Object.keys(json).length > 1) {
      container = new SUITE.Component("container");
      template = new SUITE.Template(container);
      for (selector in json) {
        properties = json[selector];
        single_template = {};
        single_template[selector] = properties;
        new_template = SUITE.ParseTemplate(single_template);
        template.extend(new_template);
        container.addChild(new_template._component);
      }
      return template;
    }
    selector_regex = /([A-Za-z0-9\-\_]+)(\@([A-Za-z0-9\-\_]+))?(\#([A-Za-z0-9\-\_]+))?(\.([A-Za-z0-9\-\_]+))?/;
    parse_selector = function(selector) {
      var classes, component, id, jsvar, match, _;
      selector = selector.replace("<", "").replace(">", "");
      match = selector.match(selector_regex);
      if (match == null) {
        throw new Error("Invalid selector: '" + selector + "'");
      }
      _ = match[0], component = match[1], _ = match[2], jsvar = match[3], _ = match[4], id = match[5], _ = match[6], classes = match[7];
      classes = classes != null ? classes.replace(".", " ") : void 0;
      return [component, jsvar, id, classes];
    };
    build_recursive = function(selector, properties, template) {
      var classes, comp_count, component, component_name, id, jsvar, name, slot_properties, slot_selector, top_level, val, _ref;
      _ref = parse_selector(selector), component_name = _ref[0], jsvar = _ref[1], id = _ref[2], classes = _ref[3];
      component = new SUITE.Component(component_name);
      if ((id != null) && component.hasPropertyValue("id")) {
        component.$id = id;
      }
      if ((classes != null) && component.hasPropertyValue("class")) {
        component.$class = classes;
      }
      top_level = template == null;
      if (top_level) {
        template = new SUITE.Template(component);
      }
      for (name in properties) {
        val = properties[name];
        if (name[0] === "$") {
          component[name] = val;
        } else if (component._module.slots[name] != null) {
          if (!(properties instanceof Object)) {
            throw new Error("Expected component(s) on slot '" + name + "', got " + (typeof properties));
          }
          if (comp_count = Object.keys(properties).length === 0) {
            throw new Error("Expected component(s) on slot '" + name + "', got none");
          }
          if (!component._module.slots[name].isRepeated && comp_count > 1) {
            throw new Error("Slot '" + name + "' can only accept 1 component, got " + comp_count);
          }
          for (slot_selector in val) {
            slot_properties = val[slot_selector];
            component.fillSlot(name, build_recursive(slot_selector, slot_properties, template));
          }
        } else {
          throw new Error("No slot named '" + name + "' exists on module '" + component_name + "'");
        }
      }
      if (jsvar != null) {
        template.addComponentVariable(jsvar, component);
      }
      if (top_level) {
        return template;
      } else {
        return component;
      }
    };
    single_key = Object.keys(json)[0];
    return build_recursive(single_key, json[single_key]);
  };

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("visible-element").addProperty("id", [SUITE.PrimitiveType.String], "", function(val) {
    return this.setAttrs({
      "id": val
    });
  }).addProperty("class", [SUITE.PrimitiveType.String], "", function(val) {
    return this.setAttrs({
      "class": val
    });
  }).addProperty("fill", [SUITE.PrimitiveType.Color]).addProperty("stroke", [SUITE.PrimitiveType.Color]).addProperty("strokeWidth", [SUITE.PrimitiveType.Number]).addProperty("shadow", [SUITE.PrimitiveType.String]).addProperty("cornerRadius", [SUITE.PrimitiveType.Number]).addStyle("styled", {
    backgroundColor: function() {
      return this.$fill;
    },
    borderColor: function() {
      return this.$stroke;
    },
    borderWidth: function() {
      return this.$strokeWidth;
    },
    borderRadius: function() {
      return this.$cornerRadius;
    },
    boxShadow: function() {
      return this.$shadow;
    }
  }).setRenderer(function(tag) {
    var div;
    if (tag == null) {
      tag = "div";
    }
    div = this.createElement(tag);
    if (window.SUITE.config.component_attribute) {
      div.setAttribute("data-component", this._.type);
    }
    if (this.$id !== "") {
      div.setAttribute("id", this.$id);
    }
    if (this.$class !== "") {
      div.setAttribute("class", this.$class);
    }
    this.applyStyle(div, "positioned");
    this.applyStyle(div, "sized");
    this.applyStyle(div, "styled");
    return div;
  }).register();

  new window.SUITE.ModuleBuilder("absolute-element").extend("visible-element").addProperty("x", [SUITE.PrimitiveType.Number], 0).addProperty("y", [SUITE.PrimitiveType.Number], 0).addProperty("width", [SUITE.PrimitiveType.Number], 0, function(val, oldval) {
    if (val !== oldval) {
      return this.dispatchEvent("onResize", this.size);
    }
  }).addProperty("height", [SUITE.PrimitiveType.Number], 0, function(val, oldval) {
    if (val !== oldval) {
      return this.dispatchEvent("onResize", this.size);
    }
  }).addStyle("positioned", {
    left: function() {
      return this.$x;
    },
    top: function() {
      return this.$y;
    }
  }).addStyle("sized", {
    width: function() {
      return this.$width;
    },
    height: function() {
      return this.$height;
    }
  }).setRenderer(function(tag) {
    var div;
    div = this["super"](tag);
    this.applyStyle(div, "positioned");
    this.applyStyle(div, "sized");
    return div;
  }).register();

  new window.SUITE.ModuleBuilder("fixed-size-element").extend("absolute-element").addProperty("width", [SUITE.PrimitiveType.Number], 0, function() {
    return this.setPropertyWithoutSetter("width", this.computeSize().width);
  }).addProperty("height", [SUITE.PrimitiveType.Number], 0, function() {
    return this.setPropertyWithoutSetter("height", this.computeSize().height);
  }).addMethod("computeSize", function() {
    return {
      width: 100,
      height: 100
    };
  }).addMethod("updateSize", function() {
    this.$width = 0;
    this.$height = 0;
    return this.dispatchEvent("onResize", this.size);
  }).register();

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("container").extend("absolute-element").addSlot("children", true).addMethod("addChild", function(child) {
    return this.fillSlot("children", child);
  }).setRenderer(function() {
    var div, slot, _i, _len, _ref;
    div = this["super"]();
    _ref = this.slots.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slot = _ref[_i];
      div.appendChild(this.renderSlot(slot));
    }
    return div;
  }).setOnResize(function(size) {
    var slot, _i, _len, _ref, _results;
    this.$width = size.width;
    this.$height = size.height;
    _ref = this.slots.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slot = _ref[_i];
      _results.push(slot.resize(size));
    }
    return _results;
  }).register();

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("layout-in-container").extend("visible-element").addSlot("child", false).addProperty("containerWidth", [SUITE.PrimitiveType.Number]).addProperty("containerHeight", [SUITE.PrimitiveType.Number]).setOnResize(function(size) {
    this.$containerWidth = size.width;
    return this.$containerHeight = size.height;
  }).addProperty("childWidth", [SUITE.PrimitiveType.Number]).addProperty("childHeight", [SUITE.PrimitiveType.Number]).addSlotEventHandler("child", "onResize", function(size) {
    this.$childWidth = this.slots.child.$width;
    return this.$childHeight = this.slots.child.$height;
  }).setRenderer(function(renderChild) {
    var div;
    if (renderChild == null) {
      renderChild = true;
    }
    div = this["super"]();
    if (renderChild) {
      div.appendChild(this.renderSlot(this.slots.child));
      this.slots.child.resize(this.size);
      this.slots.child.dispatchEvent("onResize");
    }
    return div;
  }).register();

  new window.SUITE.ModuleBuilder("float-layout").extend("layout-in-container").addProperty("floatX", [SUITE.PrimitiveType.Number], 0.5).addProperty("floatY", [SUITE.PrimitiveType.Number], 0.5).addStyle("floating", {
    left: function() {
      return (this.$containerWidth - this.$childWidth) * this.$floatX;
    },
    top: function() {
      return (this.$containerHeight - this.$childHeight) * this.$floatY;
    }
  }).setRenderer(function() {
    var div;
    div = this["super"]();
    this.applyStyle(div, "floating");
    return div;
  }).register();

  new window.SUITE.ModuleBuilder("pinned-layout").extend("layout-in-container").addProperty("top", [SUITE.PrimitiveType.Number]).addProperty("left", [SUITE.PrimitiveType.Number]).addProperty("bottom", [SUITE.PrimitiveType.Number]).addProperty("right", [SUITE.PrimitiveType.Number]).addStyle("absolute", {
    top: function() {
      return this.$top;
    },
    left: function() {
      return this.$left;
    },
    bottom: function() {
      return this.$bottom;
    },
    right: function() {
      return this.$right;
    },
    width: function() {
      return this.$childWidth;
    },
    height: function() {
      return this.$childHeight;
    }
  }).setRenderer(function() {
    var div;
    div = this["super"]();
    this.applyStyle(div, "absolute");
    return div;
  }).register();

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("box").extend("container").addProperty("minWidth", [SUITE.PrimitiveType.Number]).addProperty("minHeight", [SUITE.PrimitiveType.Number]).addProperty("maxWidth", [SUITE.PrimitiveType.Number]).addProperty("maxHeight", [SUITE.PrimitiveType.Number]).setOnResize(function(size) {
    if ((this.$maxWidth != null) && (this.$minWidth != null)) {
      this.$width = parseInt(Math.max(Math.min(size.width, this.$maxWidth), this.$minWidth));
    }
    if ((this.$maxHeight != null) && (this.$minHeight != null)) {
      return this.$height = parseInt(Math.max(Math.min(size.height, this.$maxHeight), this.$minHeight));
    }
  }).register();

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("text").extend("fixed-size-element").addProperty("string", [SUITE.PrimitiveType.String], "", function(val) {
    if (this.rootElement == null) {
      return;
    }
    this.rootElement.innerHTML = val;
    return this.updateSize();
  }).addProperty("color", [SUITE.PrimitiveType.Color]).addProperty("fontFamily", [SUITE.PrimitiveType.String, SUITE.PrimitiveType.List], ["Helvetica", "Arial", "sans-serif"], function() {
    return this.updateSize();
  }).addProperty("fontSize", [SUITE.PrimitiveType.Number], 12, function() {
    return this.updateSize();
  }).addProperty("letterSpacing", [SUITE.PrimitiveType.Number], 0, function() {
    return this.updateSize();
  }).addStyle("text", {
    color: function() {
      return this.$color;
    },
    fontSize: function() {
      return this.$fontSize;
    },
    fontFamily: function() {
      return "'" + (this.$fontFamily.join("', '")) + "'";
    },
    letterSpacing: function() {
      return this.$letterSpacing;
    },
    lineHeight: function() {
      return this.$height + "px";
    }
  }).setRenderer(function() {
    var p;
    p = this["super"]("p");
    p.innerHTML = this.$string;
    this.applyStyle(p, "text");
    this.updateSize();
    return p;
  }).addMethod("computeSize", function() {
    return new SUITE.TextMetrics(this).measure(this.$string);
  }).register();

}).call(this);
(function() {
  new window.SUITE.ModuleBuilder("button").extend("absolute-element").addProperty("onClick", [SUITE.PrimitiveType.Function], void 0, function(val, _, oldVal) {
    if (this.rootElement == null) {
      return;
    }
    if (oldVal != null) {
      this.rootElement.removeEventListener("click", oldVal);
    }
    return this.rootElement.addEventListener("click", val);
  }).addStyle("button", {
    cursor: "pointer"
  }).setRenderer(function() {
    var div;
    div = this["super"]();
    this.applyStyle(div, "button");
    div.addEventListener("click", this.$onClick);
    return div;
  }).register();

}).call(this);
